openapi: 3.0.3
info:
  title: API
  version: "1.0"
servers:
  - url: http://localhost:8080
paths:
  /auth/register:
    post:
      summary: Register user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password, name]
              properties:
                email: { type: string, format: email }
                password: { type: string, minLength: 6 }
                name: { type: string }
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id: { type: integer, format: uint64 }
        "409": { description: User exists }
        "400": { description: Bad request }
        "500": { description: Internal error }
  /auth/login:
    post:
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, format: email }
                password: { type: string }
      responses:
        "200":
          description: Tokens
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token: { type: string }
                  refresh_token: { type: string }
        "401": { description: Unauthenticated }
        "400": { description: Bad request }
        "500": { description: Internal error }
  /auth/refresh:
    post:
      summary: Refresh tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refresh_token]
              properties:
                refresh_token: { type: string }
      responses:
        "200":
          description: Tokens
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token: { type: string }
                  refresh_token: { type: string }
        "401": { description: Unauthenticated }
        "400": { description: Bad request }
  /auth/validate:
    post:
      summary: Validate access token
      responses:
        "200":
          description: Valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid: { type: boolean }
                  user_id: { type: integer, format: uint64 }
        "401": { description: Unauthenticated }
  /auth/user/{id}:
    get:
      summary: Get user by id
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer, format: uint64 }
      responses:
        "200":
          description: User
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id: { type: integer, format: uint64 }
                  email: { type: string, format: email }
                  name: { type: string }
        "401": { description: Unauthenticated }
        "404": { description: Not found }
  /link:
    get:
      summary: List links of current user
      responses:
        "200":
          description: List
          content:
            application/json:
              schema:
                type: object
                properties:
                  total: { type: integer, format: uint64 }
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Link"
        "401": { description: Unauthenticated }
    post:
      summary: Create link
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [url]
              properties:
                url: { type: string, format: uri }
      responses:
        "200":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LinkResponse"
    patch:
      summary: Update link (by id or hash)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [url]
              properties:
                id: { type: integer, format: uint32 }
                hash: { type: string }
                url: { type: string, format: uri }
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LinkResponse"
  /link/{hash}:
    get:
      summary: Get link by hash
      parameters:
        - name: hash
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Link
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LinkResponse"
        "404": { description: Not found }
  /link/{id}:
    delete:
      summary: Delete link by id
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer, format: uint32 }
      responses:
        "200":
          description: Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string }
        "404": { description: Not found }
  /link/hash/{hash}:
    delete:
      summary: Delete link by hash
      parameters:
        - name: hash
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string }
        "404": { description: Not found }
  /r/{hash}:
    get:
      summary: Redirect by hash
      parameters:
        - name: hash
          in: path
          required: true
          schema: { type: string }
      responses:
        "302": { description: Found }
        "404": { description: Not found }
  /stat:
    get:
      summary: Stats for current user
      parameters:
        - name: from
          in: query
          required: false
          schema: { type: string, example: "2025-07-01" }
        - name: to
          in: query
          required: false
          schema: { type: string, example: "2025-07-31" }
        - name: by
          in: query
          required: false
          schema:
            type: string
            enum: [day, week, month]
      responses:
        "200":
          description: Stats
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Stat"
components:
  schemas:
    Link:
      type: object
      properties:
        id: { type: integer, format: uint32 }
        url: { type: string, format: uri }
        hash: { type: string }
        user_id: { type: integer, format: uint32 }
    LinkResponse:
      type: object
      properties:
        link:
          $ref: "#/components/schemas/Link"
    Stat:
      type: object
      properties:
        date: { type: string, format: date }
        clicks: { type: integer }
        link_id: { type: integer, format: uint32 }
