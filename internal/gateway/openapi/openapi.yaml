openapi: 3.0.3
info:
  title: API
  version: "1.0"
servers:
  - url: http://localhost:8080

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    RegisterRequest:
      type: object
      required: [email, password, name]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
          description: "Не менее 8 символов (validator:\"min=8\")"
        name:
          type: string

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    RefreshRequest:
      type: object
      required: [refresh_token]
      properties:
        refresh_token:
          type: string

    Link:
      type: object
      properties:
        id:
          type: integer
          format: uint32
        url:
          type: string
          pattern: '^https?://.+'
          description: "Должен начинаться с http:// или https://"
        hash:
          type: string
        user_id:
          type: integer
          format: uint32

    LinkResponse:
      type: object
      properties:
        link:
          $ref: "#/components/schemas/Link"

    Stat:
      type: object
      properties:
        date:
          type: string
          format: date
        clicks:
          type: integer
        link_id:
          type: integer
          format: uint32

    ErrorResponse:
      type: object
      properties:
        message:
          type: string

paths:
  /auth/register:
    post:
      summary: Регистрация нового пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "200": { description: Успешно } 
        "400":
          description: Неверные данные
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500": { description: Внутренняя ошибка }

  /auth/login:
    post:
      summary: Вход (получение токенов)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Успешный вход
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  refresh_token:
                    type: string
        "401": { description: Неверные учётные данные }
        "500": { description: Внутренняя ошибка }

  /auth/refresh:
    post:
      summary: Обновление токенов
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshRequest"
      responses:
        "200": { description: Токены обновлены }
        "400": { description: Неверный запрос }
        "401": { description: Неверный refresh token }
        "500": { description: Внутренняя ошибка }

  /auth/validate:
    post:
      summary: Проверка access token
      security:
        - BearerAuth: []
      responses:
        "200": { description: Токен валиден }
        "401": { description: Неверный или просроченный токен }

  /auth/user/{id}:
    get:
      summary: Получить данные пользователя по ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: uint64
      responses:
        "200": { description: Данные пользователя }
        "401": { description: Требуется авторизация }
        "404": { description: Пользователь не найден }
        "500": { description: Внутренняя ошибка }

  /link:
    get:
      summary: Список ссылок текущего пользователя
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Список ссылок
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Link"

    post:
      summary: Создать новую короткую ссылку
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [url]
              properties:
                url:
                  type: string
                  pattern: '^https?://.+'
            example:
              url: "https://example.com"
      responses:
        "201":
          description: Ссылка создана
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LinkResponse"
        "400": { description: Неверный URL }
        "401": { description: Требуется авторизация }
        "500": { description: Внутренняя ошибка }

    patch:
      summary: Обновить существующую ссылку (по id или hash)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [url]
              properties:
                id:
                  type: integer
                  format: uint32
                hash:
                  type: string
                url:
                  type: string
                  pattern: '^https?://.+'
            example:
              id: 1
              url: "https://updated.example.com"
      responses:
        "200": { description: Обновлено }
        "400": { description: Неверные данные }
        "401": { description: Требуется авторизация }
        "404": { description: Ссылка не найдена }
        "500": { description: Внутренняя ошибка }

  /link/{id}:
    delete:
      summary: Удалить ссылку по числовому ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: uint32
      responses:
        "200": { description: Удалено }
        "401": { description: Требуется авторизация }
        "404": { description: Ссылка не найдена }

  /link/hash/{hash}:
    delete:
      summary: Удалить ссылку по hash
      security:
        - BearerAuth: []
      parameters:
        - name: hash
          in: path
          required: true
          schema:
            type: string
      responses:
        "200": { description: Удалено }
        "401": { description: Требуется авторизация }
        "404": { description: Ссылка не найдена }

  /r/{hash}:
    get:
      summary: Перенаправление по короткому hash
      description: |
        Отправляет HTTP 302 на оригинальный URL.  
        **В Swagger UI** может не работать из‑за автоматического follow-redirect и CORS —  
        тестируйте через браузерную адресную строку или `curl -v` .
      parameters:
        - name: hash
          in: path
          required: true
          schema:
            type: string
      responses:
        "302": { description: Редиректился (Location header) }
        "404": { description: Ссылка не найдена }

  /stat:
    get:
      summary: Статистика переходов текущего пользователя
      security:
        - BearerAuth: []
      parameters:
        - name: from
          in: query
          schema:
            type: string
            format: date
            example: "2025-07-01"
        - name: to
          in: query
          schema:
            type: string
            format: date
            example: "2025-07-31"
        - name: by
          in: query
          schema:
            type: string
            enum: [day, week, month]
            example: "day"
      responses:
        "200":
          description: Статистика (после переходов по /r/{hash})
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Stat"
              example:
                items:
                  - date: "2025-07-20"
                    clicks: 5
                    link_id: 1
                  - date: "2025-07-21"
                    clicks: 3
                    link_id: 1
