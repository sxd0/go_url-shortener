services:
  auth_postgres:
    image: postgres:17
    restart: always
    container_name: auth_postgres
    env_file:
      - ./cmd/auth/.env
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 3s
      timeout: 2s
      retries: 5
    volumes:
      - auth_postgres_data:/var/lib/postgresql/data

  auth_migrate:
    image: migrate/migrate
    container_name: auth_migrate
    depends_on:
      auth_postgres:
        condition: service_healthy
    volumes:
      - ./internal/auth/migrations:/migrations
    env_file:
      - ./cmd/auth/.env
    command:
      [
        "-path", "/migrations",
        "-database", "postgres://postgres:my_pass@auth_postgres:5432/auth_db?sslmode=disable",
        "up"
      ]

  auth_service:
    build:
      context: .
      dockerfile: ./cmd/auth/Dockerfile
    container_name: auth_service
    env_file:
      - ./cmd/auth/.env
    depends_on:
      auth_postgres:
        condition: service_healthy
    ports:
      - "50051:50051"
      - "9101:9101"
    volumes:
      - ./jwt_private.pem:/app/jwt_private.pem
      - ./jwt_public.pem:/app/jwt_public.pem

  link_postgres:
    image: postgres:17
    restart: always
    container_name: link_postgres
    env_file:
      - ./cmd/link/.env
    ports:
      - "5435:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 3s
      timeout: 2s
      retries: 5
    volumes:
      - link_postgres_data:/var/lib/postgresql/data

  link_migrate:
    image: migrate/migrate
    container_name: link_migrate
    depends_on:
      link_postgres:
        condition: service_healthy
    volumes:
      - ./internal/link/migrations:/migrations
    env_file:
      - ./cmd/link/.env
    command:
      [
        "-path", "/migrations",
        "-database", "postgres://postgres:my_pass@link_postgres:5432/link_db?sslmode=disable",
        "up"
      ]

  link_service:
    build:
      context: .
      dockerfile: ./cmd/link/Dockerfile
    container_name: link_service
    env_file:
      - ./cmd/link/.env
    depends_on:
      link_postgres:
        condition: service_healthy
    ports:
      - "50052:50052"
      - "9102:9102"

  stat_postgres:
    image: postgres:17
    restart: always
    container_name: stat_postgres
    env_file:
      - ./cmd/stat/.env
    ports:
      - "5436:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 3s
      timeout: 2s
      retries: 5
    volumes:
      - stat_postgres_data:/var/lib/postgresql/data

  stat_migrate:
    image: migrate/migrate
    container_name: stat_migrate
    depends_on:
      stat_postgres:
        condition: service_healthy
    volumes:
      - ./internal/stat/migrations:/migrations
    env_file:
      - ./cmd/stat/.env
    command:
      [
        "-path", "/migrations",
        "-database", "postgres://postgres:my_pass@stat_postgres:5432/stat_db?sslmode=disable",
        "up"
      ]

  stat_service:
    build:
      context: .
      dockerfile: ./cmd/stat/Dockerfile
    container_name: stat_service
    env_file:
      - ./cmd/stat/.env
    depends_on:
      stat_postgres:
        condition: service_healthy
    ports:
      - "50053:50053"
      - "9103:9103"

  gateway_service:
    build:
      context: .
      dockerfile: ./cmd/gateway/Dockerfile
    container_name: gateway_service
    env_file:
      - ./cmd/gateway/.env
    depends_on:
      - auth_service
      - link_service
      - stat_service
      - redis
    ports:
      - "8080:8080"
    volumes:
      - ./jwt_public.pem:/app/jwt_public.pem

  redis:
    image: redis:7-alpine
    ports: ["6379:6379"]
    container_name: redis_service

  prometheus:
    image: prom/prometheus:v2.49.0
    container_name: prometheus
    volumes:
      - ./deploy/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    depends_on:
      - gateway_service
      - auth_service
      - link_service
      - stat_service

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports:
      - "9092:9092"
    depends_on:
      - gateway_service
      - auth_service
      - link_service
      - stat_service


volumes:
  auth_postgres_data:
  link_postgres_data:
  stat_postgres_data:

networks:
  default:
    driver: bridge
